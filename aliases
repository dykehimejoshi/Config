# Aliases

# Navigating directories
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ..3='cd ../../..'
alias ..4='cd ../../../..'
alias ..5='cd ../../../../..'
alias ..6='cd ../../../../../..'
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias grip='grep -i'
alias grvp='grep -i -v'
alias findinfile='grep -iRl 2>/dev/null'
alias printinfile='grep -iR 2>/dev/null'
alias la='ls -a'
alias lah='ls -lah'
alias lh='ls -lh'
alias l='ls'
alias ll='ls -la'
alias lf='ls -F'
alias laf='ls -aF'
alias llf='ls -laF'
mkcd () { mkdir -p "$1" && cd "$1"; }
alias cd='newcd () { cd "${1:-$HOME}" && ls; }; newcd'
test -d /run/media/$USER && alias cdmedia="cd /run/media/$USER"

# exit without saving shell history
alias xx='kill -9 $$; unset HISTFILE && exit'
# reload shell without exit
alias rlsh='exec $SHELL -l'
nohist () {
    test -z "$HISTFILE" && { echo 'Histfile already unset!'; return 1; }
    unset HISTFILE && echo 'Histfile unset.'
}

# Git aliases
if [ $(command -v git) ]; then
    alias ga='git add'
    alias gcm='git commit'
    alias gcsm='git commit -S'
    alias gpull='git pull'
    alias gpush='git push'
    alias gbr='git branch'
    alias gco='git checkout'
    alias gl='git log'
    alias gl-pretty='git log --oneline --decorate --graph --all'
    alias gdif='git diff'
    alias gst='git status'
    alias getgiturl='git config --get remote.origin.url'
fi

# WINE aliases
if [ $(command -v wine) ]; then
    alias cdcdir='cd ~/.wine/drive_c/'
    alias wine64='WINEPREFIX=$HOME/.wine64 wine64'
fi

# xclip
if [ $(command -v xclip) ]; then
    alias copyimg='copyimg () { xclip -selection clipboard -t image/png -i < $1; }; copyimg'
fi

# vim
if [ $(command -v vim) ]; then
    alias view='vim -R -M'
    alias vi='vim -v -C -u NONE'
    alias v='vim'
    #alias e='vim'
    export VISUAL=vim
fi

# vifm
if [ $(command -v vifm) ]; then
    alias vf='vifm .'
    alias fm='vifm'
fi

# ranger
if [ $(command -v ranger) ]; then
    alias fm='ranger'
fi

# helix
if [ $(command -v helix) ]; then
    alias hx='helix'
    # overwrite the alias in vim
    #alias e='helix'
    export VISUAL=helix
fi

if [ ! -z $DISPLAY ] || [ ! -z $WAYLAND_DISPLAY ]; then
    # we (probably) have a gui

    # set the pdf viewer alias
    test $(command -v atril)     && alias pdf='atril'
    test $(command -v evince)    && alias pdf='evince'
    test $(command -v zathura)   && alias pdf='zathura'

    # set the epub viewer alias
    test $(command -v ebook-viewer)  && alias epub='ebook-viewer'

    # set the image viewer alias
    test $(command -v eog)  && alias image='eog'
    test $(command -v eom)  && alias image='eom'
    test $(command -v feh)  && alias image='feh'
else
    # pdf
    test $(command -v pdftotext)    && alias pdf='pdf () { pdftotext "$1" - | less; }; pdf'

    : # TODO
fi

## battery profile
if [ $(command -v powerprofilesctl) ]; then
    batprf () {
        if  [ "$1" = "performance" ] || [ "$1" = "balanced" ] || \
                [ "$1" = "power-saver" ] || [ "$1" = "powersaver" ]; then
            # set the power profile
            powerprofilesctl set $1
        elif [ "$1" = "get" ] || [ "$1" = "" ]; then
            # print the
            powerprofilesctl get
        else
            # just do whatever
            powerprofilesctl $*
        fi
    }
fi

# Administration

## sudo & pkg manager aliases
if [[ "$(id -u)" -eq 0  ||  -n "$(groups | grep -E '(sudo|wheel)')" || -n "$TERMUX_VERSION" ]]; then
    if [ $(command -v sudo) ]; then
        alias _='sudo'
        alias _i='sudo -i'
        alias _s='sudo -s'
    fi

    # ins, srx, shw, and rem aliases should use the default package manager
    # for any distro
    if [ $(command -v apt) ]; then
        # if apt is installed
        alias agi='sudo apt install -y'
        alias acs='apt search'
        acss () { apt search "$1" | grep --color=none "$1" ; } # s = strict
        alias acshow='apt show'
        alias agr='sudo apt remove'
        alias upd='sudo /bin/bash -c "echo \"--- update\" ; apt update && echo \"--- upgrade\" ; apt upgrade -y && echo \"--- autoremove\" ; apt autoremove -y"'

        alias showmanualins='apt-mark showmanual'

        alias ins='agi'
        alias srx='acs'
        alias shw='acshow'
        alias rem='agr'
    fi

    if [ $(command -v pkg) ]; then
        # if pkg is installed
        alias pki='pkg install'
        alias pks='pkg search'
        alias pkshow='pkg show'
        alias pkr='pkg remove'
        alias upd='pkg upgrade'

        alias ins='pki'
        alias srx='pks'
        alias shw='pkshow'
        alias rem='pkr'
    fi

    if [ $(command -v pacman) ]; then
        # if pacman is installed
        alias paci='sudo pacman -S'
        alias pacs='pacman -Ss'
        alias pacshow='pacman -Si'
        alias pacr='sudo pacman -R'
        alias upd='sudo pacman -Syyu'

        alias remorphans='pacman -Qtdq | sudo pacman -Rns - || echo No packages to remove'
        alias showmanualins='pacman -Qetq'

        alias ins='paci'
        alias srx='pacs'
        alias shw='pacshow'
        alias rem='pacr'
    fi

    if [ $(command -v yay) ]; then
        # if yay is installed
        alias yayi='yay -S'
        alias yays='yay -Ss'
        alias yayshow='yay -Si'
        alias yayr='yay -R'
        # Should overwrite the `update' alias from pacman if installed
        alias upd='yay'
        alias updaur='yay -aSyyu'

        alias showmanualins='yay -Qetq'

        alias ins='yayi'
        alias srx='yays'
        alias shw='yayshow'
        alias rem='yayr'
    fi

    if [ $(command -v emerge) ]; then
        # USE can be changed after a command, with the specified package going after
        alias emi='emerge --ask'
        alias emr='emerge --deselect' # will be later removed with --depclean
        alias emsrx='emerge --search'

        alias upd='emerge --update --deep @world'

        alias ins='emi'
        alias srx='emsrx'
        #alias shw=''
        alias rem='emr'
    fi

    if [ $(command -v guix) ]; then
        alias gins='guix install'
        alias grem='guix remove'
        alias gsrx='guix search'
        alias gshw='guix show'

        alias upd='guix pull && guix package -u'

        alias ins='gins'
        alias rem='grem'
        alias shw='gshw'
        alias srx='gsrx'
    fi

fi

alias chkdu='df -h 2>/dev/null | head -n 1 && df -h 2>/dev/null | grep data-root --color=none'
alias dd='dd status=progress'
alias rm='rm -i'
alias ip='ip -color'

perms () {
    # get permissions for the current directory or a specified file
    filelisting=$(ls -dl $1)
    if [[ ! "$(echo $?)" == 0 ]]; then return; fi
    listing=$(echo $filelisting | sed 's/ * / /g')
    fname=$(echo $listing | cut -d ' ' -f 9)
    permissions=$(echo $listing | cut -d ' ' -f 1)
    is_dir=$(echo ${permissions:0:1})
    p_owner=$(echo ${permissions:1:3})
    p_group=$(echo ${permissions:4:3})
    p_other=$(echo ${permissions:7:3})
    owner=$(echo $listing | cut -d ' ' -f 3)
    group=$(echo $listing | cut -d ' ' -f 4)
    octal=$(stat -c "%04a" ${1:-.})
    echo -n "Permissions for: $(basename $fname) "
    if [ "$is_dir" = 'd' ]; then echo "[directory]"; else echo "[file]"; fi
    echo " u: $p_owner ${octal:1:1} ($owner)"
    echo " g: $p_group ${octal:2:1} ($group)"
    echo " o: $p_other ${octal:3:1}"
    echo " sticky bit: ${octal:0:1}"
    # todo: maybe more
}

## ssh
if [ $(command -v ssh) ]; then
    sshpassthru () {
        # $1: port on host you want access to; $2: port to put it on; $3: <user>@<host>
        if test $# -ne 3; then
            echo "args: <from host port> <to local port> <host>"
        else
            ssh -NL "$2":localhost:"$1" "$3"
        fi
    }
fi

## usbguard
if [ $(command -v usbguard) ]; then
    alias usballow='sudo usbguard allow-device'
    alias usbblock='sudo usbguard block-device'
    alias usbreject='sudo usbguard reject-device'
    alias usblist='sudo usbguard list-devices'
    alias usbwatch='sudo usbguard watch'
fi

## gpg
if [ $(command -v gpg) ]; then
    # fixes when the gpg agent fucks up sometimes
    alias _fix-gpg='gpg-connect-agent killagent /bye; sleep 2; gpg-connect-agent updatestartuptty /bye'
fi

# KDE Plasma
if [ $(command -v plasmashell) ]; then
    alias restartplasma='sh -c "kquitapp5 plasmashell && plasmashell >/dev/null &"'
fi

# Less Configuration
LESS="-f -g -i -J -M -R -S -w -x4"; export LESS

# Python
if [ $(command -v python3) ]; then
    alias py='python3'
    alias py3='python3'
    alias mkvenv='python3 -m venv venv'
    alias govenv='. venv/bin/activate'
    alias byevenv='deactivate'
    alias serve='serve () { port="${1:-8000}"; echo $( (ip -c=never -br -4 a | tr -s " " | \
        grep -E "^(wl|ww|sl|ib|en|eth|lo)" | cut -d " " -f3 | cut -d/ -f1 |\
        tail -n1) ):$port ; python3 -m http.server $port; }; serve'
fi

# php
if [ $(command -v php) ]; then
    # $1 is the port with 8000 being default
    # $2 is the address we bind to, with everywhere being the default
    alias servephp='servephp () { php -S ${2:-0.0.0.0}:${1:-8000}; }; servephp'
fi

# Misc
alias t='tmux'
alias ta='tmux attach'

## ed
if [ $(command -v ed) ]; then
    alias ed='ed -p "> "'
    export EDITOR=ed
fi

## bc
if [ $(command -v bc) ]; then
    alias calc='calc () { bc -l <<< "$1"; }; calc'
fi

if [ $(command -v syncthing) ]; then
    alias rmsyncconflicts='find -L ~ -name "*sync-conflict*" -exec rm -i {} \;'
    alias findsyncconflicts='find ~ -name "*sync-conflict*"'
fi

## alsamixer
if [ $(command -v alsamixer) ]; then
    alias mixer='alsamixer'
fi

## nautilus (todo for other gui file managers)
if [ $(command -v nautilus) ]; then
    alias openhere='nautilus . &'
fi

alias e=${VISUAL:-${EDITOR}}

## Aliases for reverse engineering/pentesting/etc. ##

# radare2
if [ $(command -v r2) ]; then
    alias r2d='r2 -A -d'
    alias r2wd='r2 -A -d -w'
    alias r2empty='r2 malloc://512'
fi

# rizin (r2 fork)
if [ $(command -v rizin) ]; then
    alias rz='rizin'
    alias rzd='rizin -A -d'
fi

# javap (reversing compiled .class files)
if [ $(command -v javap) ]; then
    alias javadec='javap -v -p -c'
fi

# Look at the hex or binary representations of files
hex () { xxd "$1" | view -; }
bin () { xxd -b -c 8 "$1" | view -; }

# compare hex dumps
hexdiff () {
    vimdiff <(_hexdiff $1) <(_hexdiff $2)
}
# helper command
_hexdiff () { hexdump -C $1 | cut -d ' ' -f3- | tr -s ' '; }

# annotate tail -f with timestamps
watchlog () {
    tail -f "$1" | \
    while read ; do echo "$(date +%T.%N) $REPLY"; done
}

## netcat
if [ $(command -v nc) ]; then
    alias listen='nc -nvlp $1'
fi

